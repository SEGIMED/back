generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tenant {
  id                           String                         @id @default(uuid())
  type                         tenant_type
  db_name                      String?
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  deleted                      Boolean                        @default(false)
  appointments                 appointment[]
  background                   background[]
  cat_certification_type       cat_certification_type[]
  medical_events               medical_event[]
  medical_order                medical_order[]
  mood_entries                 mood_entry[]
  organizations                organization[]
  organization_physician       organization_physician[]
  patient_tenant               patient_tenant[]
  physical_exploration         physical_exploration[]
  physicians                   physician[]
  physician_schedule           physician_schedule[]
  physician_schedule_exception physician_schedule_exception[]
  prescription                 prescription[]
  role                         role[]
  schedule_slot                schedule_slot[]
  self_evaluation_event        self_evaluation_event[]
  transaction                  transaction[]
  users                        user[]
  vital_signs                  vital_signs[]
}

model user {
  id                             String                   @id @default(uuid())
  name                           String
  last_name                      String?
  email                          String                   @unique
  password                       String?
  role                           role_type                @default(physician)
  is_superadmin                  Boolean                  @default(false)
  nationality                    String?
  gender                         String?
  identification_number          String?                  @unique
  birth_date                     DateTime?
  phone_prefix                   String?
  phone                          String?
  marital_status                 marital_status?
  is_phone_verified              Boolean                  @default(false)
  image                          String                   @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  created_at                     DateTime                 @default(now())
  updated_at                     DateTime                 @updatedAt
  deleted                        Boolean                  @default(false)
  deleted_at                     DateTime?
  tenant_id                      String?
  identification_type_id         Int?
  patientAppointments            appointment[]            @relation("patient")
  physicianAppointment           appointment[]            @relation("physician")
  background                     background[]
  medical_event_patient          medical_event[]          @relation("patient")
  medical_event_physician        medical_event[]          @relation("physician")
  medical_order_patient          medical_order[]          @relation("patient")
  medical_order_physician        medical_order[]          @relation("physician")
  medical_order                  medical_order[]
  medication_dose_logs           medication_dose_log[]
  mood_entries                   mood_entry[]
  patient                        patient?
  physical_examinations          physical_examination[]
  physical_exploration_patient   physical_exploration[]   @relation("patient")
  physical_exploration_physician physical_exploration[]   @relation("physician")
  physician                      physician?
  pres_mod_history               pres_mod_history[]
  prescription                   prescription[]
  self_evaluation_event          self_evaluation_event[]
  transactions                   transaction[]
  identification_type            cat_identification_type? @relation(fields: [identification_type_id], references: [id])
  tenant                         tenant?                  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  roles                          user_role[]
  vital_signs                    vital_signs[]

  @@index([role, tenant_id, deleted])
  @@index([tenant_id, role])
  @@index([email, deleted])
  @@index([identification_number, deleted])
}

model organization {
  id                     String                   @id @default(uuid())
  name                   String
  type                   tenant_type
  number_of_employees    Int?
  number_of_patients     Int?
  reason_register        String
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  deleted                Boolean                  @default(false)
  deleted_at             DateTime?
  tenant_id              String?
  tenant                 tenant?                  @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  organization_physician organization_physician[]
}

model organization_physician {
  id              String       @id @default(uuid())
  organization_id String
  physician_id    String
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  deleted         Boolean      @default(false)
  deleted_at      DateTime?
  tenant_id       String
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  physician       physician    @relation(fields: [physician_id], references: [id], onDelete: Cascade)
  tenant          tenant       @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}

model patient {
  id                                   String           @id @default(uuid())
  direction                            String?
  country                              String?
  province                             String?
  city                                 String?
  postal_code                          String?
  direction_number                     String?
  apartment                            String?
  health_care_number                   String?
  notes                                String?
  created_at                           DateTime         @default(now())
  updated_at                           DateTime         @updatedAt
  deleted                              Boolean          @default(false)
  deleted_at                           DateTime?
  user_id                              String           @unique
  medication_reminder_interval_minutes Int?             @default(30)
  medication_reminder_max_retries      Int?             @default(3)
  user                                 user             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  patient_tenant                       patient_tenant[]
  emergency_contacts                   emergency_contact[] @relation("PatientToEmergencyContacts")
}

model emergency_contact {
  id           String  @id @default(uuid())
  patient_id   String
  patient      patient   @relation("PatientToEmergencyContacts", fields: [patient_id], references: [id], onDelete: Cascade) 
  contact_name String
  relationship String
  email        String?
  phone_prefix String
  phone        String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model patient_tenant {
  id         String    @id @default(uuid())
  patient_id String
  tenant_id  String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted    Boolean   @default(false)
  deleted_at DateTime?
  patient    patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  tenant     tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@unique([patient_id, tenant_id])
  @@index([deleted])
  @@index([tenant_id, deleted])
}

model physician {
  id                           String                         @id @default(uuid())
  user_id                      String                         @unique
  tenant_id                    String?
  medical_registry             String?
  signature                    String?
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  deleted                      Boolean                        @default(false)
  deleted_at                   DateTime?
  organization_physician       organization_physician[]
  tenant                       tenant?                        @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user                         user                           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  physician_schedule           physician_schedule[]
  physician_schedule_exception physician_schedule_exception[]
  physician_speciality         physician_speciality[]
  schedule_slot                schedule_slot[]
}

model appointment {
  id                  String          @id @default(uuid())
  consultation_reason String
  start               DateTime
  end                 DateTime
  patient_id          String
  physician_id        String
  status              status_type     @default(pendiente)
  cancelation_reason  String?
  comments            String?
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  deleted             Boolean         @default(false)
  deleted_at          DateTime?
  tenant_id           String
  patient             user            @relation("patient", fields: [patient_id], references: [id], onDelete: Cascade)
  physician           user            @relation("physician", fields: [physician_id], references: [id], onDelete: Cascade)
  tenant              tenant          @relation(fields: [tenant_id], references: [id])
  medical_events      medical_event[]

  @@index([patient_id, tenant_id, status, start])
  @@index([physician_id, tenant_id, status, start])
  @@index([patient_id, status, start, deleted])
  @@index([physician_id, status, start, deleted])
  @@index([tenant_id, status, start, deleted])
}

model medical_event {
  id                        String                      @id @default(uuid())
  appointment_id            String
  patient_id                String
  physician_id              String
  physician_comments        String?
  main_diagnostic_cie_id    Int?                        @default(1)
  evolution                 String?
  procedure                 String?
  treatment                 String?
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  deleted                   Boolean                     @default(false)
  deleted_at                DateTime?
  tenant_id                 String
  appointment               appointment                 @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  main_diagnostic_cie       subcategories_cie_diez?     @relation(fields: [main_diagnostic_cie_id], references: [id])
  patient                   user                        @relation("patient", fields: [patient_id], references: [id], onDelete: Cascade)
  physician                 user                        @relation("physician", fields: [physician_id], references: [id], onDelete: Cascade)
  tenant                    tenant                      @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  physical_examination      physical_examination[]
  physical_exploration      physical_exploration?
  pres_mod_history          pres_mod_history[]
  self_evaluation_event     self_evaluation_event[]
  subcategory_medical_event subcategory_medical_event[]
  vital_signs               vital_signs[]

  @@index([patient_id, tenant_id, created_at])
  @@index([physician_id, tenant_id, created_at])
  @@index([appointment_id])
  @@index([patient_id, deleted, created_at])
  @@index([tenant_id, deleted, created_at])
}

model transaction {
  id         String    @id @default(uuid())
  orderId    String
  status     String
  amount     Float
  currency   String
  userId     String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deleted_at DateTime?
  tenant_id  String
  tenant     tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user       user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model patient_study {
  id                String         @id @default(uuid())
  patient_id        String
  physician_id      String?
  url               String?        @default("")
  title             String
  description       String
  tenant_id         String?
  cat_study_type_id Int
  is_deleted        Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  cat_study_type    cat_study_type @relation(fields: [cat_study_type_id], references: [id], onDelete: Cascade)

  @@index([patient_id, tenant_id, is_deleted])
  @@index([patient_id, is_deleted, createdAt])
  @@index([physician_id, tenant_id, is_deleted])
  @@map("patient_studies")
}

model password_reset {
  id         String    @id @default(uuid())
  token      String    @unique
  email      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted    Boolean   @default(false)
  deleted_at DateTime?
}

model physical_examination {
  id                    String                  @id @default(uuid())
  physical_subsystem_id Int?
  patient_id            String
  description           String
  medical_event_id      String
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  deleted               Boolean                 @default(false)
  deleted_at            DateTime?
  medical_event         medical_event           @relation(fields: [medical_event_id], references: [id], onDelete: Cascade)
  user                  user                    @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  physical_subsystem    cat_physical_subsystem? @relation(fields: [physical_subsystem_id], references: [id])
}

model physical_exploration {
  id                           String                    @id @default(uuid())
  patient_id                   String
  physician_id                 String
  medical_event_id             String                    @unique
  description                  String
  physical_exploration_area_id Int
  tenant_id                    String
  medical_event                medical_event             @relation(fields: [medical_event_id], references: [id], onDelete: Cascade)
  patient                      user                      @relation("patient", fields: [patient_id], references: [id], onDelete: Cascade)
  physical_exploration_area    physical_exploration_area @relation(fields: [physical_exploration_area_id], references: [id])
  physician                    user                      @relation("physician", fields: [physician_id], references: [id], onDelete: Cascade)
  tenant                       tenant                    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}

model physical_exploration_area {
  id                   Int                    @id @default(autoincrement())
  name_on_library      String                 @unique
  name                 String                 @unique
  physical_exploration physical_exploration[]
}

model physician_speciality {
  id            String         @id @default(uuid())
  physician_id  String
  speciality_id Int
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted       Boolean        @default(false)
  deleted_at    DateTime?
  physician     physician      @relation(fields: [physician_id], references: [id], onDelete: Cascade)
  speciality    cat_speciality @relation(fields: [speciality_id], references: [id], onDelete: Cascade)

  @@index([physician_id, deleted])
  @@index([speciality_id, deleted])
}

model otp_code {
  id              String    @id
  code            String
  code_expires_at DateTime?
}

model background {
  id                        String   @id @default(uuid())
  patient_id                String
  vaccinations              String
  allergies                 String
  pathological_history      String
  family_medical_history    String
  non_pathological_history  String
  surgical_history          String
  childhood_medical_history String
  current_medication        String
  tenant_id                 String
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt
  patient                   user     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  tenant                    tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([patient_id, tenant_id, created_at])
  @@index([tenant_id, created_at])
}

model subcategory_medical_event {
  id                     String                 @id @default(uuid())
  subCategoryId          Int
  medical_eventId        String
  medical_event          medical_event          @relation(fields: [medical_eventId], references: [id], onDelete: Cascade)
  subcategories_cie_diez subcategories_cie_diez @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  @@unique([subCategoryId, medical_eventId])
}

model prescription {
  id                               String                          @id @default(uuid())
  start_timestamp                  DateTime                        @default(now())
  end_timestamp                    DateTime?
  description                      String?
  active                           Boolean                         @default(true)
  patient_id                       String?
  monodrug                         String
  show_in_calendar                 Boolean                         @default(false)
  authorized                       Boolean                         @default(false)
  patient_stopped_treatment        Boolean                         @default(false)
  patient_stopped_treatment_date   DateTime?
  patient_stopped_treatment_reason String?
  tenant_id                        String?
  created_by_patient               Boolean                         @default(false)
  first_dose_taken_at              DateTime?
  is_tracking_active               Boolean                         @default(false)
  last_reminder_sent_at            DateTime?
  reminder_enabled                 Boolean                         @default(true)
  reminders_sent_count             Int                             @default(0)
  skip_reason_details              String?
  skip_reason_id                   Int?
  time_of_day_slots                String[]
  medication_dose_logs             medication_dose_log[]
  pres_mod_history                 pres_mod_history[]
  user                             user?                           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  skip_reason                      medication_skip_reason_catalog? @relation(fields: [skip_reason_id], references: [id])
  tenant                           tenant?                         @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([patient_id, active])
  @@index([tenant_id, active])
  @@index([patient_id, monodrug, active])
  @@index([patient_id, tenant_id, active])
  @@index([monodrug, active])
}

model pres_mod_history {
  id               String         @id @default(uuid())
  prescription_id  String
  physician_id     String?
  mod_timestamp    DateTime       @default(now())
  medical_event_id String?
  medical_order_id String?
  observations     String?
  dose             String
  dose_units       String
  frecuency        String
  duration         String
  duration_units   String
  commercial_name  String?
  medical_event    medical_event? @relation(fields: [medical_event_id], references: [id])
  medical_order    medical_order? @relation(fields: [medical_order_id], references: [id])
  physician        user?          @relation(fields: [physician_id], references: [id])
  prescription     prescription   @relation(fields: [prescription_id], references: [id])
}

model medication_dose_log {
  id                  String                          @id @default(uuid())
  prescription_id     String
  user_id             String
  scheduled_time      DateTime
  actual_taken_time   DateTime?
  status              medication_dose_status
  reported_at         DateTime                        @default(now())
  skip_reason_id      Int?
  skip_reason_details String?
  created_at          DateTime                        @default(now())
  updated_at          DateTime                        @updatedAt
  prescription        prescription                    @relation(fields: [prescription_id], references: [id], onDelete: Cascade)
  skip_reason         medication_skip_reason_catalog? @relation(fields: [skip_reason_id], references: [id])
  user                user                            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([prescription_id, user_id, scheduled_time, status])
  @@index([user_id, scheduled_time, status])
  @@index([prescription_id, status, scheduled_time])
  @@index([user_id, status, reported_at])
}

model medication_skip_reason_catalog {
  id                   Int                   @id @default(autoincrement())
  reason_text          String
  category             String
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  medication_dose_logs medication_dose_log[]
  prescriptions        prescription[]
}

model self_evaluation_event {
  id               String         @id @default(uuid())
  patient_id       String
  medical_event_id String?
  tenant_id        String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  medical_event    medical_event? @relation(fields: [medical_event_id], references: [id], onDelete: Cascade)
  patient          user           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  tenant           tenant?        @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  vital_signs      vital_signs[]
}

model vital_signs {
  id                       String                 @id @default(uuid())
  patient_id               String
  medical_event_id         String?
  self_evaluation_event_id String?
  vital_sign_id            Int
  measure                  Int
  tenant_id                String?
  created_at               DateTime               @default(now())
  updated_at               DateTime               @updatedAt
  deleted                  Boolean                @default(false)
  deleted_at               DateTime?
  medical_event            medical_event?         @relation(fields: [medical_event_id], references: [id], onDelete: Cascade)
  patient                  user                   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  self_evaluation_event    self_evaluation_event? @relation(fields: [self_evaluation_event_id], references: [id], onDelete: Cascade)
  tenant                   tenant?                @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  vital_sign               cat_vital_signs        @relation(fields: [vital_sign_id], references: [id], onDelete: Cascade)

  @@index([patient_id, vital_sign_id, created_at(sort: Desc), deleted])
  @@index([patient_id, deleted, created_at])
  @@index([medical_event_id, deleted])
  @@index([self_evaluation_event_id, deleted])
  @@index([tenant_id, deleted])
}

model medical_order {
  id                        String                  @id @default(uuid())
  medical_order_type_id     String
  patient_id                String
  physician_id              String
  category_cie_diez_id      Int?
  additional_text           String?
  application_date          DateTime?
  description_type          String?
  url                       String?
  request_date              DateTime                @default(now())
  tenant_id                 String?
  cat_study_type_id         Int?
  request_reason            String?
  cat_certification_type_id Int?
  hospitalization_reason    String?
  cat_speciality_id         Int?
  userId                    String?
  cat_certification_type    cat_certification_type? @relation(fields: [cat_certification_type_id], references: [id])
  cat_speciality            cat_speciality?         @relation(fields: [cat_speciality_id], references: [id])
  cat_study_type            cat_study_type?         @relation(fields: [cat_study_type_id], references: [id])
  category_cie_diez         category_cie_diez?      @relation(fields: [category_cie_diez_id], references: [id])
  medical_order_type        medical_order_type      @relation(fields: [medical_order_type_id], references: [id])
  patient                   user                    @relation("patient", fields: [patient_id], references: [id])
  physician                 user                    @relation("physician", fields: [physician_id], references: [id])
  tenant                    tenant?                 @relation(fields: [tenant_id], references: [id])
  user                      user?                   @relation(fields: [userId], references: [id])
  pres_mod_history          pres_mod_history[]

  @@index([patient_id, tenant_id, request_date])
  @@index([physician_id, tenant_id, request_date])
  @@index([medical_order_type_id, tenant_id])
  @@index([patient_id, medical_order_type_id])
  @@index([physician_id, medical_order_type_id])
}

model cat_identification_type {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  country     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        user[]
}

model cat_physical_subsystem {
  id                    Int                    @id @default(autoincrement())
  name                  String
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  deleted               Boolean                @default(false)
  deleted_at            DateTime?
  physical_examinations physical_examination[]
}

model cat_speciality {
  id                   Int                    @id @default(autoincrement())
  name                 String
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  deleted              Boolean                @default(false)
  deleted_at           DateTime?
  medical_order        medical_order[]
  physician_speciality physician_speciality[]
  cat_vital_signs      cat_vital_signs[]      @relation("SpecialityVitalSigns")
}

model category_cie_diez {
  id                     Int                      @id @default(autoincrement())
  code                   String
  description            String
  medical_order          medical_order[]
  subcategories_cie_diez subcategories_cie_diez[]
}

model subcategories_cie_diez {
  id                        Int                         @id @default(autoincrement())
  code                      String
  description               String
  categoryId                Int
  medical_event             medical_event[]
  category_cie_diez         category_cie_diez           @relation(fields: [categoryId], references: [id])
  subcategory_medical_event subcategory_medical_event[]

  @@index([categoryId])
  @@index([code])
}

model cat_vital_signs {
  id                  Int               @id @default(autoincrement())
  name                String
  category            String
  color               String?
  icon                String?
  mini_icon           String?
  cat_measure_unit_id Int?
  background_icon     String?
  critical_max_value  Float?
  high_max_value      Float?
  normal_max_value    Float?
  normal_min_value    Float?
  slightly_high_value Float?
  cat_measure_unit    cat_measure_unit? @relation(fields: [cat_measure_unit_id], references: [id])
  vital_signs         vital_signs[]
  specialties         cat_speciality[]  @relation("SpecialityVitalSigns")
}

model cat_measure_unit {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  cat_vital_signs cat_vital_signs[]
}

model cat_study_type {
  id              Int             @id @default(autoincrement())
  name            String
  medical_order   medical_order[]
  patient_studies patient_study[]
}

model medical_order_type {
  id            String          @id @default(uuid())
  name          String
  description   String?
  medical_order medical_order[]
}

model cat_certification_type {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  deleted        Boolean         @default(false)
  deleted_at     DateTime?
  tenant_id      String?
  custom         Boolean         @default(false)
  tenant         tenant?         @relation(fields: [tenant_id], references: [id])
  medical_orders medical_order[]
}

model role {
  id          String            @id @default(uuid())
  name        String
  description String?
  is_system   Boolean           @default(false)
  tenant_id   String?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  deleted     Boolean           @default(false)
  deleted_at  DateTime?
  tenant      tenant?           @relation(fields: [tenant_id], references: [id])
  permissions role_permission[]
  users       user_role[]
}

model permission {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  created_at  DateTime          @default(now())
  updated_at  DateTime          @updatedAt
  roles       role_permission[]
}

model role_permission {
  id            String     @id @default(uuid())
  role_id       String
  permission_id String
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
}

model user_role {
  id         String   @id @default(uuid())
  user_id    String
  role_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  role       role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
}

model physician_schedule {
  id                 String    @id @default(uuid())
  physician_id       String
  day_of_week        Int
  start_time         String
  end_time           String
  appointment_length Int
  simultaneous_slots Int       @default(1)
  break_between      Int       @default(0)
  rest_start         String?
  rest_end           String?
  is_working_day     Boolean   @default(true)
  modality           String
  office_id          String?
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  deleted            Boolean   @default(false)
  deleted_at         DateTime?
  tenant_id          String
  physician          physician @relation(fields: [physician_id], references: [id], onDelete: Cascade)
  tenant             tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([physician_id, day_of_week])
}

model physician_schedule_exception {
  id           String    @id @default(uuid())
  physician_id String
  date         DateTime
  is_available Boolean   @default(false)
  reason       String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted      Boolean   @default(false)
  deleted_at   DateTime?
  tenant_id    String
  physician    physician @relation(fields: [physician_id], references: [id], onDelete: Cascade)
  tenant       tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([physician_id, date])
}

model schedule_slot {
  id           String    @id @default(uuid())
  physician_id String
  start_time   DateTime
  end_time     DateTime
  is_available Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted      Boolean   @default(false)
  deleted_at   DateTime?
  tenant_id    String
  physician    physician @relation(fields: [physician_id], references: [id], onDelete: Cascade)
  tenant       tenant    @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([physician_id, start_time, end_time])
}

model mood_entry {
  id         String   @id @default(uuid())
  patient_id String
  mood_level Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tenant_id  String
  patient    user     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  tenant     tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
}

enum role_type {
  patient
  physician
  organization_owner
  superadmin
}

enum marital_status {
  soltero
  casado
  divorciado
  viudo
  union_libre
}

enum status_type {
  atendida
  cancelada
  pendiente
  no_asistida
}

enum tenant_type {
  individual
  organization
}

enum gender {
  masculino
  femenino
  otro
}

enum medication_dose_status {
  TAKEN
  MISSED_AUTOMATIC
  MISSED_REPORTED
  SKIPPED_BY_USER
}
