// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role_type {
  PATIENT
  PHYSICIAN
  ORGANIZATION_OWNER
}

enum status_type {
  Atendida
  Cancelada
  Pendiente
}

model patient {
  id                 String  @id @default(uuid())
  health_care_number String?
  userId             String
  tenantId           String

  appointments   appointment[]
  medical_events medical_event[]
}

model physician {
  id        String @id @default(uuid())
  specialty String
  userId    String
  tenantId  String

  appointments   appointment[]
  medical_events medical_event[]
}

model appointment {
  id                  String      @id @default(uuid())
  consultation_reason String
  start               DateTime
  end                 DateTime
  patient_id          String
  physician_id        String
  status              status_type
  cancelation_reason  String?
  comments            String?
  tenant_id           String

  // Relaciones
  patient   patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  physician physician @relation(fields: [physician_id], references: [id], onDelete: Cascade)

  medical_events medical_event[]

  @@index([physician_id, start, end])
}

model medical_event {
  id                  String  @id @default(uuid())
  appointment_id      String
  patient_id          String
  physician_id        String
  physician_comments  String?
  main_diagnostic_cie String?
  evolution           String?
  procedure           String?
  treatment           String?
  tenant_id           String

  // Relaciones
  appointment appointment @relation(fields: [appointment_id], references: [id])
  patient     patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  physician   physician   @relation(fields: [physician_id], references: [id], onDelete: Cascade)
}

//paypal model
model Transaction {
  id           String   @id @default(uuid())
  orderId      String   // ID de la orden de PayPal
  status       String   // Estado de la transacción (COMPLETED, FAILED, etc.)
  amount       Float    // Monto de la transacción
  currency     String   // Moneda de la transacción (USD, EUR, etc.)
  
  createdAt    DateTime @default(now())

  @@map("transaction")  // Esto indica que Prisma debe usar 'transaction' en minúsculas
}

// SUBSCRIPCIONES
model subscription {
  id               String                @id @default(uuid())
  tenant_id        String
  user_id          String
  status           subscription_status_type
  type             String                @default("trial")
  start_date       DateTime
  end_date         DateTime
  last_payment_date DateTime?
  payment_method   String?

  payments         payment[] // Relación con Payment
}

model subscription_type {
  id               String @id @default(uuid())
  name             String
  price            Float
  trial_period_days Int
  features         Json
}

enum subscription_status_type {
  active
  trial
  cancelled
  expired
}

//PAGOS
model payment {
  id               String               @id @default(uuid())
  user_id          String
  tenant_id        String
  subscription_id  String
  subscription     subscription         @relation(fields: [subscription_id], references: [id])
  amount           Float
  currency         String
  payment_method   String
  transaction_id   String?
  payment_date     DateTime
  status           payment_status_type
}

enum payment_status_type {
  success
  failed
  pending
}