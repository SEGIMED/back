// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  PATIENT
  PHYSICIAN
  ORGANIZATION_OWNER
}

enum status_type {
  Atendida
  Cancelada
  Pendiente
}

model User {
  id          String      @id @default(uuid())
  name        String
  email       String?     @unique
  password    String?
  googleId    String?     @unique
  role        RoleType
  tenantId    String
  nationality String?
  gender      String?
  phonePrefix String
  phone       String
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  patients    Patient[]
  physicians  Physician[]
}

model Patient {
  id               String @id @default(uuid())
  healthCareNumber String
  userId           String
  user             User   @relation(fields: [userId], references: [id])
  tenantId         String

  appointments Appointment[]
}

model Physician {
  id        String @id @default(uuid())
  specialty String
  userId    String
  user      User   @relation(fields: [userId], references: [id])
  tenantId  String

  appointments Appointment[]
}

model Appointment {
  id               String   @id @default(uuid())
  consultation_reason String
  start            DateTime
  end              DateTime
  patient_id       String
  physician_id     String
  status           status_type
  cancelation_reason String
  comments         String
  tenant_id        String

  // Relaciones
  patient Patient @relation(fields: [patient_id], references: [id])
  physician Physician @relation(fields: [physician_id], references: [id])
  medical_events MedicalEvent[]
  // tenant Tenant @relation(fields: [tenant_id], references: [id])
}

model MedicalEvent {
  id                  String   @id @default(uuid())
  appointment_id      String
  patient_id          String
  physician_id        String
  physician_comments  String
  main_diagnostic_cie String
  evolution           String
  procedure           String
  treatment           String
  tenant_id           String

  // Relaciones
  appointment         Appointment @relation(fields: [appointment_id], references: [id])
  // tenant              Tenant      @relation(fields: [tenant_id], references: [id])
}
