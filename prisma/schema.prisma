generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String        @id @default(uuid())
  name         String
  last_name    String?
  email        String        @unique
  password     String?
  google_id    String?       @unique
  role         role_type
  tenant_id    String
  nationality  String?
  gender       String?
  dniType      String?
  dni          String         @unique
  birthdate    DateTime?
  phone_prefix String?
  phone        String?
  image        String         @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  patient      patient? 
  physicians   physician[]
  transactions transaction[]
}

model patient {
  id                  String          @id @default(uuid())
  direction           String?
  country             String?
  province            String?
  city                String?
  postal_code         String?
  direction_number    String?
  apparment           String?
  health_care_number  String?
  userId              String          @unique
  appointments        appointment[]
  medical_events      medical_event[]
  user                user            @relation(fields: [userId], references: [id])
}

model physician {
  id             String          @id @default(uuid())
  specialty      String
  userId         String
  tenantId       String
  appointments   appointment[]
  medical_events medical_event[]
  user           user            @relation(fields: [userId], references: [id])
}

model appointment {
  id                  String          @id @default(uuid())
  consultation_reason String
  start               DateTime
  end                 DateTime
  patient_id          String
  physician_id        String
  status              status_type     @default(Pendiente)
  cancelation_reason  String?
  comments            String?
  patient             patient         @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  physician           physician       @relation(fields: [physician_id], references: [id], onDelete: Cascade)
  medical_events      medical_event[]

  @@index([physician_id, start, end])
}

model medical_event {
  id                  String      @id @default(uuid())
  appointment_id      String
  patient_id          String
  physician_id        String
  physician_comments  String?
  main_diagnostic_cie String?
  evolution           String?
  procedure           String?
  treatment           String?
  appointment         appointment @relation(fields: [appointment_id], references: [id])
  patient             patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  physician           physician   @relation(fields: [physician_id], references: [id], onDelete: Cascade)
}

model transaction {
  id        String   @id @default(uuid())
  orderId   String
  status    String
  amount    Float
  currency  String
  userId    String
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id])
}

enum role_type {
  PATIENT
  PHYSICIAN
  ORGANIZATION_OWNER
}

enum status_type {
  Atendida
  Cancelada
  Pendiente
}

enum tenant_type {
  INDIVIDUAL
  ORGANIZATION
}
