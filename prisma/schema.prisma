// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum role_type {
  PATIENT
  PHYSICIAN
  ORGANIZATION_OWNER
}

enum status_type {
  Atendida
  Cancelada
  Pendiente
}

enum tenant_type {
  INDIVIDUAL
  ORGANIZATION
}

model user {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String?
  google_id    String?       @unique
  role         role_type
  tenant_id    String
  nationality  String?
  gender       String?
  dni          String
  birthdate    DateTime?
  phone_prefix String
  phone        String
  image        String        @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  patients     patient[]
  physicians   physician[]
  transactions transaction[]
}

model patient {
  id                 String  @id @default(uuid())
  health_care_number String?
  userId             String
  user               user    @relation(fields: [userId], references: [id])
  tenantId           String

  appointments   appointment[]
  medical_events medical_event[]
}

model physician {
  id        String @id @default(uuid())
  specialty String
  userId    String
  user      user   @relation(fields: [userId], references: [id])
  tenantId  String

  appointments   appointment[]
  medical_events medical_event[]
}

model appointment {
  id                  String      @id @default(uuid())
  consultation_reason String
  start               DateTime
  end                 DateTime
  patient_id          String
  physician_id        String
  status              status_type @default(Pendiente)
  cancelation_reason  String?
  comments            String?
  // tenant_id           String

  // Relaciones
  patient   patient   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  physician physician @relation(fields: [physician_id], references: [id], onDelete: Cascade)

  medical_events medical_event[]
  // tenant tenant @relation(fields: [tenant_id], references: [id])

  @@index([physician_id, start, end])
}

model medical_event {
  id                  String  @id @default(uuid())
  appointment_id      String
  patient_id          String
  physician_id        String
  physician_comments  String?
  main_diagnostic_cie String?
  evolution           String?
  procedure           String?
  treatment           String?
  // tenant_id           String

  // Relaciones
  appointment appointment @relation(fields: [appointment_id], references: [id])
  patient     patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  physician   physician   @relation(fields: [physician_id], references: [id], onDelete: Cascade)
  // tenant              Tenant      @relation(fields: [tenant_id], references: [id])
}

//paypal model
model transaction {
  id        String   @id @default(uuid())
  orderId   String // ID de la orden de PayPal
  status    String // Estado de la transacción (COMPLETED, FAILED, etc.)
  amount    Float // Monto de la transacción
  currency  String // Moneda de la transacción (USD, EUR, etc.)
  userId    String // Relación con el usuario que realizó el pago
  user      user     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
