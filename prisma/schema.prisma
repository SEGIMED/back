generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model tenant {
  id         String      @id @default(uuid())
  type       tenant_type
  db_name    String?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  users                  user[]
  organizations          organization[]
  patients               patient[]
  physicians             physician[]
  appointments           appointment[]
  medical_events         medical_event[]
  organization_physician organization_physician[]
}

model user {
  id                    String                 @id @default(uuid())
  name                  String
  last_name             String?
  email                 String                 @unique
  password              String?
  role                  role_type              @default(physician)
  nationality           String?
  gender                String?
  dni                   String?                @unique
  birth_date            DateTime?
  phone_prefix          String?
  phone                 String?
  is_phone_verified     Boolean                @default(false)
  image                 String                 @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  created_at            DateTime               @default(now())
  updated_at            DateTime               @updatedAt
  transactions          transaction[]
  physical_examinations physical_examination[]

  tenant_id String?
  patient   patient?
  tenant    tenant?  @relation(fields: [tenantId], references: [id])
  tenantId  String?

  physicianAppointment appointment[] @relation(name: "physician")
  patientAppointments  appointment[] @relation(name: "patient")
  physician            physician[]
}

model organization {
  id                  String      @id @default(uuid())
  name                String
  type                tenant_type
  number_of_employees Int?
  number_of_patients  Int?
  reason_register     String

  tenant_id              String?
  tenant                 tenant?                  @relation(fields: [tenant_id], references: [id])
  organization_physician organization_physician[]
}

model organization_physician {
  id              String       @id @default(uuid())
  organization_id String
  physician_id    String
  organization    organization @relation(fields: [organization_id], references: [id])
  physician       physician    @relation(fields: [physician_id], references: [id])
  tenant_id       String
  tenant          tenant?      @relation(fields: [tenant_id], references: [id])
}

model patient {
  id                 String  @id @default(uuid())
  direction          String?
  country            String?
  province           String?
  city               String?
  postal_code        String?
  direction_number   String?
  apartment          String?
  health_care_number String?
  user_id            String  @unique
  user               user    @relation(fields: [user_id], references: [id])

  tenant_id String
  tenant    tenant? @relation(fields: [tenantId], references: [id])
  tenantId  String?

  medical_event medical_event[]
}

model physician {
  id               String  @id @default(uuid())
  user_id          String
  user             user    @relation(fields: [user_id], references: [id])
  tenant_id        String?
  tenant           tenant? @relation(fields: [tenant_id], references: [id])
  medical_registry String?

  medical_event          medical_event[]
  physician_speciality   physician_speciality[]
  organization_physician organization_physician[]
}

model appointment {
  id                  String          @id @default(uuid())
  consultation_reason String
  start               DateTime
  end                 DateTime
  patient_id          String
  physician_id        String
  status              status_type     @default(pendiente)
  cancelation_reason  String?
  comments            String?
  patient             user            @relation(name: "patient", fields: [patient_id], references: [id], onDelete: Cascade)
  physician           user            @relation(name: "physician", fields: [physician_id], references: [id], onDelete: Cascade)
  medical_events      medical_event[]

  tenant_id String
  tenant    tenant? @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model medical_event {
  id                   String                 @id @default(uuid())
  appointment_id       String
  patient_id           String
  physician_id         String
  physician_comments   String?
  main_diagnostic_cie  String?
  evolution            String?
  procedure            String?
  treatment            String?
  appointment          appointment            @relation(fields: [appointment_id], references: [id])
  patient              patient                @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  physician            physician              @relation(fields: [physician_id], references: [id], onDelete: Cascade)
  physical_examination physical_examination[]

  tenant_id String
  tenant    tenant? @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model transaction {
  id         String   @id @default(uuid())
  orderId    String
  status     String
  amount     Float
  currency   String
  userId     String
  created_at DateTime @default(now())
  user       user     @relation(fields: [userId], references: [id])

  tenant_id String
}

model password_reset {
  id         String   @id @default(uuid())
  token      String   @unique
  email      String
  created_at DateTime @default(now())
}

model physical_examination {
  id                    String                  @id @default(uuid())
  physical_subsystem_id Int?
  patient_id            String
  description           String
  medical_event_id      String
  tenant_id             String
  medical_event         medical_event           @relation(fields: [medical_event_id], references: [id])
  user                  user                    @relation(fields: [patient_id], references: [id])
  physical_subsystem    cat_physical_subsystem? @relation(fields: [physical_subsystem_id], references: [id])
  createdAt             DateTime                @default(now())
  updated_at            DateTime                @updatedAt
}

model otp_code {
  id              String    @id
  code            String
  code_expires_at DateTime?
}

model physician_speciality {
  id            String         @id @default(uuid())
  physician_id  String
  speciality_id Int
  physician     physician      @relation(fields: [physician_id], references: [id])
  speciality    cat_speciality @relation(fields: [speciality_id], references: [id])
}

//!Catalogs

model cat_physical_subsystem {
  id                    Int                    @id @default(autoincrement())
  name                  String
  physical_examinations physical_examination[]
}

model cat_speciality {
  id                   Int                    @id @default(autoincrement())
  name                 String
  physician_speciality physician_speciality[]
}

//!Types

enum role_type {
  patient
  physician
  organization_owner
}

enum status_type {
  atendida
  cancelada
  pendiente
}

enum tenant_type {
  individual
  organization
}
